{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x7e9174D86E615af58bccb8b8f368D817c3A6537A",
      "txHash": "0xd8f929e550dfff0c7df2936f2db801670e1ba40acd15ba202bbf3271e05ff317",
      "kind": "uups"
    }
  ],
  "impls": {
    "6ec935b54f61aab94535976aba59f9a79717c3fad27fd0da46c32a2d4f06ee72": {
      "address": "0xCf0f41c9914E0B024B3c645cC77d62a933eAe9E5",
      "txHash": "0x7645d19730b0f0c15972932c3b4c68ababc7a39fbf0168e50e1e7c8e052c77da",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
          },
          {
            "contract": "InferusNames",
            "label": "basePrice",
            "type": "t_uint256",
            "src": "contracts\\InferusNames.sol:10"
          },
          {
            "contract": "InferusNames",
            "label": "totalNames",
            "type": "t_uint256",
            "src": "contracts\\InferusNames.sol:11"
          },
          {
            "contract": "InferusNames",
            "label": "names",
            "type": "t_mapping(t_bytes32,t_address)",
            "src": "contracts\\InferusNames.sol:12"
          },
          {
            "contract": "InferusNames",
            "label": "transfers",
            "type": "t_mapping(t_bytes32,t_address)",
            "src": "contracts\\InferusNames.sol:13"
          },
          {
            "contract": "InferusNames",
            "label": "linkingPrices",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\InferusNames.sol:14"
          },
          {
            "contract": "InferusNames",
            "label": "metadataURIs",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bytes_storage))",
            "src": "contracts\\InferusNames.sol:15"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_address)": {
            "label": "mapping(bytes32 => address)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_bytes32,t_bytes_storage))": {
            "label": "mapping(address => mapping(bytes32 => bytes))"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "label": "mapping(bytes32 => bytes)"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
