/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SubscriptionManagerInterface extends utils.Interface {
  contractName: "SubscriptionManager";
  functions: {
    "COIN_ADDRESS()": FunctionFragment;
    "createPlan(uint256,address,uint256,bool)": FunctionFragment;
    "initialize()": FunctionFragment;
    "lastId()": FunctionFragment;
    "owner()": FunctionFragment;
    "planBalances(uint256)": FunctionFragment;
    "plans(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "subscribe(uint256)": FunctionFragment;
    "subscribeWithPermit(uint256,address,uint8,bytes32,bytes32)": FunctionFragment;
    "subscriptions(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPlanOwnership(uint256,address)": FunctionFragment;
    "updatePlanProperties(uint256,uint256,uint256,uint8)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawPlanBalance(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COIN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPlan",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "planBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "plans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeWithPermit",
    values: [BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPlanOwnership",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanProperties",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlanBalance",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COIN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPlanOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlanBalance",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CreatePlan(uint256,address,address,uint256,uint256,uint8)": EventFragment;
    "CreateSubscription(uint256,uint256,address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferPlanOwnership(uint256,address,address)": EventFragment;
    "UpdatePlanProperties(uint256,address,uint256,uint256,uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdraw(uint256,address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePlan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferPlanOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePlanProperties"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type CreatePlanEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, number],
  {
    id: BigNumber;
    owner: string;
    token: string;
    tokenAmount: BigNumber;
    duration: BigNumber;
    status: number;
  }
>;

export type CreatePlanEventFilter = TypedEventFilter<CreatePlanEvent>;

export type CreateSubscriptionEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  {
    planId: BigNumber;
    subscriptionId: BigNumber;
    subscriber: string;
    subscribedBy: string;
    expiry: BigNumber;
  }
>;

export type CreateSubscriptionEventFilter =
  TypedEventFilter<CreateSubscriptionEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferPlanOwnershipEvent = TypedEvent<
  [BigNumber, string, string],
  { id: BigNumber; from: string; to: string }
>;

export type TransferPlanOwnershipEventFilter =
  TypedEventFilter<TransferPlanOwnershipEvent>;

export type UpdatePlanPropertiesEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, number],
  {
    id: BigNumber;
    updatedBy: string;
    tokenAmount: BigNumber;
    duration: BigNumber;
    status: number;
  }
>;

export type UpdatePlanPropertiesEventFilter =
  TypedEventFilter<UpdatePlanPropertiesEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export type WithdrawEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  {
    planId: BigNumber;
    withdrawer: string;
    withdrawnTo: string;
    token: string;
    amount: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface SubscriptionManager extends BaseContract {
  contractName: "SubscriptionManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COIN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    createPlan(
      _duration: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _activate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    planBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, number] & {
        id: BigNumber;
        duration: BigNumber;
        tokenAmount: BigNumber;
        owner: string;
        token: string;
        status: number;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      _planId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscribeWithPermit(
      _planId: BigNumberish,
      _subscriber: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        planId: BigNumber;
        subscribedOn: BigNumber;
        expiry: BigNumber;
        subscriber: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPlanOwnership(
      _planId: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePlanProperties(
      _planId: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPlanBalance(
      _planId: BigNumberish,
      _withdrawTo: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COIN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  createPlan(
    _duration: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    _activate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  planBalances(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  plans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, number] & {
      id: BigNumber;
      duration: BigNumber;
      tokenAmount: BigNumber;
      owner: string;
      token: string;
      status: number;
    }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    _planId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscribeWithPermit(
    _planId: BigNumberish,
    _subscriber: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      id: BigNumber;
      planId: BigNumber;
      subscribedOn: BigNumber;
      expiry: BigNumber;
      subscriber: string;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPlanOwnership(
    _planId: BigNumberish,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePlanProperties(
    _planId: BigNumberish,
    _duration: BigNumberish,
    _amount: BigNumberish,
    _status: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPlanBalance(
    _planId: BigNumberish,
    _withdrawTo: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COIN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    createPlan(
      _duration: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _activate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    lastId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    planBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, number] & {
        id: BigNumber;
        duration: BigNumber;
        tokenAmount: BigNumber;
        owner: string;
        token: string;
        status: number;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    subscribe(_planId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    subscribeWithPermit(
      _planId: BigNumberish,
      _subscriber: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        planId: BigNumber;
        subscribedOn: BigNumber;
        expiry: BigNumber;
        subscriber: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPlanOwnership(
      _planId: BigNumberish,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanProperties(
      _planId: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPlanBalance(
      _planId: BigNumberish,
      _withdrawTo: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "CreatePlan(uint256,address,address,uint256,uint256,uint8)"(
      id?: BigNumberish | null,
      owner?: string | null,
      token?: string | null,
      tokenAmount?: null,
      duration?: null,
      status?: null
    ): CreatePlanEventFilter;
    CreatePlan(
      id?: BigNumberish | null,
      owner?: string | null,
      token?: string | null,
      tokenAmount?: null,
      duration?: null,
      status?: null
    ): CreatePlanEventFilter;

    "CreateSubscription(uint256,uint256,address,address,uint256)"(
      planId?: BigNumberish | null,
      subscriptionId?: BigNumberish | null,
      subscriber?: string | null,
      subscribedBy?: null,
      expiry?: null
    ): CreateSubscriptionEventFilter;
    CreateSubscription(
      planId?: BigNumberish | null,
      subscriptionId?: BigNumberish | null,
      subscriber?: string | null,
      subscribedBy?: null,
      expiry?: null
    ): CreateSubscriptionEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TransferPlanOwnership(uint256,address,address)"(
      id?: BigNumberish | null,
      from?: string | null,
      to?: string | null
    ): TransferPlanOwnershipEventFilter;
    TransferPlanOwnership(
      id?: BigNumberish | null,
      from?: string | null,
      to?: string | null
    ): TransferPlanOwnershipEventFilter;

    "UpdatePlanProperties(uint256,address,uint256,uint256,uint8)"(
      id?: BigNumberish | null,
      updatedBy?: string | null,
      tokenAmount?: null,
      duration?: null,
      status?: null
    ): UpdatePlanPropertiesEventFilter;
    UpdatePlanProperties(
      id?: BigNumberish | null,
      updatedBy?: string | null,
      tokenAmount?: null,
      duration?: null,
      status?: null
    ): UpdatePlanPropertiesEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Withdraw(uint256,address,address,address,uint256)"(
      planId?: BigNumberish | null,
      withdrawer?: string | null,
      withdrawnTo?: null,
      token?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      planId?: BigNumberish | null,
      withdrawer?: string | null,
      withdrawnTo?: null,
      token?: string | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    COIN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    createPlan(
      _duration: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _activate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    planBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    plans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscribe(
      _planId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscribeWithPermit(
      _planId: BigNumberish,
      _subscriber: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPlanOwnership(
      _planId: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePlanProperties(
      _planId: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPlanBalance(
      _planId: BigNumberish,
      _withdrawTo: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COIN_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPlan(
      _duration: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _activate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    plans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      _planId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscribeWithPermit(
      _planId: BigNumberish,
      _subscriber: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPlanOwnership(
      _planId: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanProperties(
      _planId: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPlanBalance(
      _planId: BigNumberish,
      _withdrawTo: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
